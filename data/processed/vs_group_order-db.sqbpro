<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="vs_group_order-db.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="browser pragmas query" current="2"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3056"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="address" custom_title="0" dock_id="4" table="4,7:mainaddress"/><dock_state state="000000ff00000000fd0000000100000002000005b40000037ffc0100000003fb000000160064006f0063006b00420072006f007700730065003101000000000000043a0000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000000005b40000000000000000fb000000160064006f0063006b00420072006f00770073006500340100000000ffffffff0000011700ffffff000005b40000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="create-tables">CREATE TABLE customer (
	ID TEXT PRIMARY KEY,
	Name TEXT NOT NULL,
	Segment TEXT
);

-- constraints needed? 
CREATE TABLE product (
	ID INTEGER PRIMARY KEY,
	Name TEXT NOT NULL,
	ProductCategoryID INTEGER,
	ProductReference Text,
	PriceBuy NUMERIC,
	PriceSell NUMERIC,
	Profit NUMERIC,
	FOREIGN	KEY (ProductCategoryID) REFERENCES productcategories(ID)
);

CREATE TABLE productcategories (
	ID TEXT PRIMARY KEY,
	Category TEXT,
	SubCategory TEXT
);

CREATE	TABLE addresssecondary (
	ID INTEGER PRIMARY KEY,
	Country TEXT,
	Region TEXT,
	State TEXT
);

CREATE	TABLE address (
	ID INTEGER PRIMARY KEY,
	City TEXT,
	PostalCode INTEGER,
	AddressSecondaryID INTEGER,
	FOREIGN KEY (AddressSecondaryID) REFERENCES addresssecondary(ID)
);

CREATE TABLE shipment (
	ID INTEGER PRIMARY KEY,
	AddressID INTEGER,
	ShipMode TEXT,
	ShipDate DATE,
	FOREIGN KEY (AddressID) REFERENCES address(ID)
);

CREATE TABLE orders (
	OrderDate DATE NOT NULL,
	ProductID INTEGER NOT NULL,
	CustomerID INTEGER NOT NULL,
	ShipmentID INTEGER NOT NULL,
	OrderReference TEXT NOT NULL,
	Quantity INTEGER NOT NULL,
	Discount NUMERIC,
	Sales NUMERIC NOT NULL,
	Profit NUMERIC,
	FOREIGN KEY (ProductID) REFERENCES product(ID),
	FOREIGN KEY (CustomerID) REFERENCES customer(ID),
	FOREIGN KEY (ShipmentID) REFERENCES shipment(ID),
	PRIMARY KEY (ProductID, CustomerID, ShipmentID, OrderReference, OrderDate)
);</sql><sql name="drop-tables">DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS customer;
DROP TABLE IF EXISTS product;
DROP TABLE IF EXISTS productcategories;
DROP TABLE IF EXISTS shipment;
DROP TABLE IF EXISTS address;
DROP TABLE IF EXISTS addresssecondary;</sql><sql name="eda-questions">-- What is the category generating the maximum sales revenue?
-- 
--     What about the profit in this category?
--     Are they making a loss in any categories or subcategories?

-- What are 5 states generating the maximum and minimum sales revenue?
-- What are the 3 products in each product segment with the highest sales?

--     Are they the 3 most profitable products as well?
 
-- What are the 3 best-seller products in each product segment? (Quantity-wise)
-- What are the top 3 worst-selling products in every category? (Quantity-wise)
-- How many unique customers per month are there for the year 2016.</sql><sql name="create_indices">-- no indices needed yet 
-- CREATE INDEX IF NOT EXISTS  &lt;&gt;nameO N  table ()key,  </sql><sql name="create_views*">CREATE VIEW IF NOT EXISTS view_all AS (
	SELECT 
		orders.*,
		customer.Name AS CustomerName,
		customer.Segment AS Segment,
		product.Name AS ProductName,
		productcategories.Category,
		productcategories.SubCategory,
		shipment.ShipDate,
		shipment.ShipMode,
		address.PostalCode,
		address.City, 
		addresssecondary.Country,
		addresssecondary.Region,
		addresssecondary.State
	FROM orders
	JOIN customer ON orders.CustomerID = customer.ID
	JOIN product ON orders.ProductID = product.ID
	JOIN productcategories ON product.ProductCategoryID = productcategories.ID
	JOIN shipment ON orders.ShipmentID = shipment.ID
	JOIN address ON shipment.AddressID = address.ID
	JOIN addresssecondary ON address.AddressSecondaryID = addresssecondary.ID
);</sql><current_tab id="4"/></tab_sql></sqlb_project>
